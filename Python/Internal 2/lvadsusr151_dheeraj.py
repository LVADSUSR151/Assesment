# -*- coding: utf-8 -*-
"""LVADSUSR151_Dheeraj.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-Uw5w-z5elBLKO8aVzkJKB7ILmuAsG_f
"""

import numpy as np
import pandas as pd

# 1
a = np.array([1,2,3,4,5,6,7,8,9])
print('std =',np.std(a))
print('mean ',np.mean(a))
print('max ',np.max(a))
print('min ',np.min(a))
print('sum ',np.sum(a))

# 2
health_data = np.array([[160, 70, 30],   # height, weight, age for individual 1
                        [165, 65, 35],   # height, weight, age for individual 2
                        [170, 75, 40]])  # height, weight, age for individual 3
df = pd.DataFrame(health_data,columns=['Height','Weight','Age'])
print(df)

# 3
score = np.array([[45,54,64,56],
                 [45,67,87,65],
                 [45,65,55,54]])
avg= np.average(score)
print(avg)

# 4
temp = np.array(np.linspace(15,25,24))
print(temp)

# 5
import numpy as np
daily_closing_prices = np.array([100, 102, 98, 105, 107, 110, 108, 112, 115, 118, 120])
window_size = 5

i = 0
while i <= len(daily_closing_prices):
  sum = np.sum(daily_closing_prices[i:i+5])
  moving_avg = sum/window_size
  print('Moving Avereages =',moving_avg)
  if i+5 ==len(daily_closing_prices):
    break
  i+=1

# 6
import numpy as np
normal_dist = np.array(np.linspace(1,100,100))
print(normal_dist)
co_mat = np. array([[1,0.5],[0.5,2]])
inverse_matrix = np.linalg.inv(co_mat)
print(inverse_matrix)

# 7
import numpy as np
properties_matrix = np.array([[1, 2, 3],
                              [4, 5, 6],
                              [7, 8, 9]])
print(np.shape(properties_matrix))
np.sum(properties_matrix)

# 8
import numpy as np
arr = np.array([1,2,3,4,5,6,7,8,9])
bools=[]
for x in range(9):
  if x <5:
    bools.append(False)
  else:
    bools.append(True)
# print(bools)
filters = np.array(bools)
print(arr[filters])

# 9
import pandas as pd
import numpy as np
data = {'Name': ['Alice', 'Bob', 'Charlie', 'David', 'Eve', 'Frank', 'Grace'],
        'Age': [25, 30, 35, 40, 45, 50, 55],
        'City': ['New York', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix', 'Miami', 'Boston'],
        'Department': ['HR', 'IT', 'Finance', 'Marketing', 'Sales', 'IT', 'HR']}

df = pd.DataFrame(data,columns=['Name','Age', 'City','Department'])
print(df)
newdf =df['Name']
print(newdf)

# 10
data = {'Department': ['Electronics', 'Electronics', 'Clothing', 'Clothing', 'Home Goods'],
        'Salesperson': ['Alice', 'Bob', 'Charlie', 'David', 'Eve'],
        'Sales': [70000, 50000, 30000, 40000, 60000]}
df = pd.DataFrame(data)
print(df)
avg_sale = df.groupby('Department',as_index=False).agg({'Sales':'sum'})
print(avg_sale)

# 11
data = {
    'Product': ['Apples', 'Bananas', 'Cherries', 'Dates', 'Elderberries', 'Flour', 'Grapes'],
    'Category': ['Fruit', 'Fruit', 'Fruit', 'Fruit', 'Fruit', 'Bakery', 'Fruit'],
    'Price': [1.20, 0.50, 3.00, 2.50, 4.00, 1.50, 2.00],
    'Promotion': [True, False, True, True, False, True, False]}

df = pd.DataFrame(data)
print(df)

newdf =df['Product']

# 12
employee_data = {
    'Employee': ['Alice', 'Bob', 'Charlie', 'David'],
    'Department': ['HR', 'IT', 'Finance', 'IT'],
    'Manager': ['John', 'Rachel', 'Emily', 'Rachel']
}

# Dataset of employee project assignments
project_data = {
    'Employee': ['Alice', 'Charlie', 'Eve'],
    'Project': ['P1', 'P3', 'P2']
}


dfe = pd.DataFrame(employee_data)
dfp = pd.DataFrame(project_data)
print(dfe)
print(dfp)

# 13
df = pd.read_csv('/Q13_sports_team_stats.csv')
print(df)
avg= df.agg({'Wins':'sum'})
print(avg)
print('average Score per game :',avg/10)

# 14
df = pd.read_csv('/Q14_customer_purchases.csv')
print(df)
countsBefore= df.agg({'CustomerID':'count'})
print(countsBefore)

# 15
df = pd.read_csv('/Q15_student_grades.csv')
print(df)