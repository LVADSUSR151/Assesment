# -*- coding: utf-8 -*-
"""LVADSUSR151_dheeraj_lab_1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RIMoyPb-ygI-DdIwXSFv3MwftfjBt2WY
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as ans
import pandas as pd
from matplotlib import pyplot as plt
import seaborn as sns
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
import xgboost as xgb
from sklearn.metrics import accuracy_score, classification_report
from sklearn.linear_model import LinearRegression

from sklearn.preprocessing import LabelEncoder

df = pd.read_csv('/content/Fare prediction.csv')

df.info()

df.head()

df.isnull().sum()

df['fare_amount'].plot(kind='hist', bins=20, title=' loan_amount')
plt.gca().spines[['top', 'right',]].set_visible(False)

df.plot(kind='scatter', x='fare_amount', y='passenger_count', s=32, alpha=.8)
plt.gca().spines[['top', 'right',]].set_visible(False)

df.columns

df

import numpy as np
def detect_outliers(df, features):
    outlier_indices = []
    for col in features:
        Q1 = np.percentile(df[col], 25, interpolation='midpoint')
        Q3 = np.percentile(df[col], 75, interpolation='midpoint')
        IQR = Q3 - Q1
        lower_bound = Q1 - 1.5 * IQR
        upper_bound = Q3 + 1.5 * IQR
        outlier_indices.extend(df[((df[col] < lower_bound) | (df[col] > upper_bound))].index.tolist())
    return outlier_indices

import matplotlib.pyplot as plt
sns.boxplot(x=df['fare_amount'])
plt.show()

from sklearn.preprocessing import MinMaxScaler

# Select numerical columns
numerical_columns = ['fare_amount', 'passenger_count']

# Create the MinMaxScaler object
scaler = MinMaxScaler()

# Fit the scaler to the numerical data
scaler.fit(df[numerical_columns])

# Transform the numerical data
df[numerical_columns] = scaler.transform(df[numerical_columns])

# Print the transformed data
df.head()

df.drop(columns=['key', 'pickup_datetime'], inplace=True)

df



X = df.drop(columns=('fare_amount'), axis=1)
y = df['fare_amount']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)



# Create a linear regression model
model = LinearRegression()

# Train the model on the training data
model.fit(X_train, y_train)

# Make predictions on the test data
y_pred = model.predict(X_test)

from sklearn.metrics import r2_score
# Calculate the R^2 score
r2_score = r2_score(y_test, y_pred)

# Print the R^2 score
print("R^2 score:", r2_score)