# -*- coding: utf-8 -*-
"""LVADSUSR151_DHEERAJ_lab2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GeC8KWT1R05UpU_EIUloBjGl35eyzWLR
"""

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import LabelEncoder

df = pd.read_csv('/content/Mall_Customers.csv')

df.head()

df.info()

df.isnull().sum()

df.fillna(df['Annual Income (k$)'].mean(),inplace=True)

df.isnull().sum()

df.describe()

plt.boxplot(df['Age'])
plt.title('BoxPlot for age ')

plt.boxplot(df['Annual Income (k$)'])
plt.title('BoxPlot for annual income')



"""there is onr outlier in annual income group so i am removing that"""

df = df[df['Annual Income (k$)'] < 130]

encoder = LabelEncoder()

modal = KMeans(n_clusters=3,n_init=5)
df['Gender'] = encoder.fit_transform(df['Gender'])
y_pred = modal.fit_predict(df[['Gender','Age','Annual Income (k$)','Spending Score (1-100)']])

df['cluster'] = y_pred
print(df.head())
print(modal.cluster_centers_)

df1 = df[df.cluster == 0]
df2 = df[df.cluster == 1]
df3 = df[df.cluster == 2]

plt.scatter(df1.Age, df1['Spending Score (1-100)'], color='green')
plt.scatter(df2.Age, df2['Spending Score (1-100)'], color='red')
plt.scatter(df3.Age, df3['Spending Score (1-100)'], color='black')
plt.scatter(modal.cluster_centers_[:, 0], modal.cluster_centers_[:, 1], color='purple', marker='*', label='centroid')
plt.xlabel('Age')
plt.ylabel('Spending Score (1-100)')
plt.legend()

scaler = MinMaxScaler()
scaler.fit(df[['Spending Score (1-100)']])
df['Spending Score (1-100)'] = scaler.transform(df[['Spending Score (1-100)']])
scaler.fit(df[['Age']])
df['Age'] = scaler.transform(df[['Age']])
print(df.head())
plt.scatter(df.Age, df['Spending Score (1-100)'])

km = KMeans(n_clusters=3)
y_predicted = km.fit_predict(df[['Age', 'Spending Score (1-100)']])
df['cluster'] = y_predicted
df.head(25)
print(km.cluster_centers_)

sse = []
k_rng = range(1, 10)
for k in k_rng:
    km = KMeans(n_clusters=k,n_init=5)
    km.fit(df[['Age', 'Spending Score (1-100)']])
    sse.append(km.inertia_)

plt.xlabel('K')
plt.ylabel('Sum of squared error')
plt.plot(k_rng, sse)
plt.show()

df.isnull().sum()

from sklearn.metrics import silhouette_score

# Compute silhouette score
silhouette_avg = silhouette_score(df, modal.labels_)
print("Silhouette Score:", silhouette_avg)