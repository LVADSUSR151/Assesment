# -*- coding: utf-8 -*-
"""Lvasusr151_Dheeraj_Kmeans.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kR7hJmXt3SIhfr3fkmiUE8bzrYdANNDB

# Problem: Customer Segmentation
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA
from sklearn.metrics import silhouette_score
import warnings
warnings.filterwarnings("ignore")

url = 'https://raw.githubusercontent.com/Deepsphere-AI/LVA-Batch5-Assessment/main/Credit%20Card%20Customer%20Data.csv'
df = pd.read_csv(url)

df.shape

df.info()

df.describe()

"""Handleling Missing Values"""

df.isnull().sum()

df = df.dropna()

df.isnull().sum()

# now there is no null values

"""Handeling Duplicates"""

# Cheking for Duplicates
df.duplicated().sum()

# there is no duplicates

"""# Outlier Detection & Handle It"""

for column in df.select_dtypes(include=['float64', 'int64']).columns:
    plt.figure(figsize=(10, 6))
    sns.boxplot(x=df[column])
    plt.title(f'Box Plot of {column}')
    plt.xlabel(column)
    plt.show()

# removing Outliers
for i in df.select_dtypes(include=['int64','float64']).columns:
  q1 = df[i].quantile(0.25)
  q3 = df[i].quantile(0.75)
  iqr = q3-q1
  lwr = q1-1.5*iqr
  upr = q3+1.5*iqr
  df.loc[df[i]>upr,i]=upr
  df.loc[df[i]<lwr,i]=lwr

"""# Univariate Analysis"""

for column in df.select_dtypes(include=['float64', 'int64']).columns:
    plt.figure(figsize=(10, 5))
    sns.histplot(df[column])
    plt.title(f'Histogram of {column}')
    plt.xlabel(column)
    plt.ylabel('Frequency')
    plt.show()

"""# Findings:

1. **The distribution of credit limit is right skewed.** This means that there are more people with low credit limits than with high credit limits.
2. **The distribution of age is approximately normal.** This means that there are a similar number of people in each age group.
3. **The distribution of number of dependents is left skewed.** This means that there are more people with no dependents than with multiple dependents.

#2. Data Pre-processing
"""

# Drop 'Customer Key' and 'Sl_No' as they are unique identifiers
df.drop(['Customer Key', 'Sl_No'], axis=1, inplace=True)

# Apply log transformation to reduce the impact of outliers
cols = ['Avg_Credit_Limit', 'Total_Credit_Cards', 'Total_visits_bank', 'Total_visits_online', 'Total_calls_made']
for col in cols:
    df[col] = np.log(1 + df[col])

# Visualize the distribution of the transformed columns
plt.figure(figsize=(15, 20))
for i, col in enumerate(cols):
    ax = plt.subplot(6, 2, i+1)
    sns.kdeplot(df[col], ax=ax)
plt.show()

"""# Findings from the graphs:

- The distribution of credit limit is right skewed.
- The distribution of age is approximately normal.
- The distribution of number of dependents is left skewed.
- After applying log transformation, the distributions of the transformed columns are more symmetric and less skewed.
"""

# Displaying the shape and descriptive statistics again after processing
print(df.describe())
print(df.shape)

df.isnull().sum()

"""#4. Model Training & Testing

Performing PCA for dimensionality reduction

Using the elbow method and silhouette scores to determine the optimal number of clusters

Implementing KMeans clustering with the optimal number of clusters
"""

# Perform PCA to reduce dimensionality while retaining 95% of the variance
pca = PCA(n_components=0.95)
X_red = pca.fit_transform(df)

"""# Elbow Method"""

# Determine the optimal number of clusters using the elbow method
kmeans_models = [KMeans(n_clusters=k, random_state=23).fit(X_red) for k in range(1, 10)]
inertia = [model.inertia_ for model in kmeans_models]

plt.plot(range(1, 10), inertia)
plt.title('Elbow method')
plt.xlabel('Number of Clusters')
plt.ylabel('WCSS')
plt.show()

# Implement KMeans clustering with the optimal number of clusters
kmeans = KMeans(n_clusters=3, random_state=23)
kmeans.fit(X_red)

#  Evaluate the number of clusters using silhouette scores
silhouette_scores = [silhouette_score(X_red, model.labels_) for model in kmeans_models[1:4]]
plt.plot(range(2, 5), silhouette_scores, "bo-")
plt.xticks([2, 3, 4])
plt.title('Silhouette scores vs Number of clusters')
plt.xlabel('Number of clusters')
plt.ylabel('Silhouette score')
plt.show()

# Calculate the silhouette score for evaluation
print('Silhouette score of our model is ' + str(silhouette_score(X_red, kmeans.labels_)))

# Assign cluster labels to the original data
df['cluster_id'] = kmeans.labels_

# Reverse the log transformation for visualization
for col in cols:
    df[col] = np.exp(df[col]) - 1

# Visualize the clusters based on key features
plt.figure(figsize=(10, 6))
sns.scatterplot(data=df, x='Total_visits_online', y='Total_calls_made', hue='cluster_id')
plt.title('Distribution of clusters based on Total visits online and Total calls made')
plt.show()

plt.figure(figsize=(10, 6))
sns.scatterplot(data=df, x='Avg_Credit_Limit', y='Total_calls_made', hue='cluster_id')
plt.title('Distribution of clusters based on Avg Credit Limit and Total calls made')
plt.show()

"""# Clusters Profiling

**Cluster 0:**
- Customers with low average credit limit, low number of credit cards, and low number of visits to the bank and online.
- They also make a low number of calls.
- These customers are likely to be less engaged with the bank and have a lower credit risk.

**Cluster 1:**
- Customers with high average credit limit, high number of credit cards, and high number of visits to the bank and online.
- They also make a high number of calls.
- These customers are likely to be more engaged with the bank and have a higher credit risk.

**Cluster 2:**
- Customers with average average credit limit, average number of credit cards, and average number of visits to the bank and online.
- They also make an average number of calls.
- These customers are likely to be moderately engaged with the bank and have a moderate credit risk.

# Business recomendation for each clusters

**Cluster 0:**

- Offer them basic banking products and services with low fees and interest rates.
- Provide them with educational resources on how to manage their finances and improve their credit score.
- Encourage them to use digital banking channels to reduce their need to visit the bank in person.

**Cluster 1:**

- Offer them premium banking products and services with higher fees and interest rates.
- Provide them with personalized financial advice and investment opportunities.
- Invite them to exclusive events and networking opportunities.

**Cluster 2:**

- Offer them a range of banking products and services that meet their individual needs.
- Provide them with regular updates on their account activity and financial health.
- Encourage them to use digital banking channels to manage their finances conveniently.
"""