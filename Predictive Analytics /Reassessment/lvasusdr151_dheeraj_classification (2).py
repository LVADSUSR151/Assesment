# -*- coding: utf-8 -*-
"""Lvasusdr151_dheeraj_classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WXFsvL4SaS7a9cFDO6l2CGxcDVs6EE0d

# Mashroom Classification
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import StandardScaler, OneHotEncoder,MinMaxScaler
from sklearn.impute import SimpleImputer
from sklearn.compose import ColumnTransformer
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report, confusion_matrix

"""# Loading Data"""

df = pd.read_csv("https://raw.githubusercontent.com/Deepsphere-AI/LVA-Batch5-Assessment/main/mushroom.csv")

"""# Basic Analysis"""

df.head()

df.shape

df.describe()

df.info()

"""Handeling Null values"""

df.isnull().sum()

# there is  null in the data so droping as it is very few in no.

df = df.dropna()

df.isnull().sum()

# now there is no null values

"""Handeling Duplicates"""

df.duplicated().sum()

# droping the duplicates from the datset
df = df.drop_duplicates()

df.duplicated().sum()

"""now there is no duplicates in data

## Univariate Analysis
"""

for column in df.select_dtypes(include=['float64', 'int64']).columns:
    plt.figure(figsize=(10, 5))
    sns.histplot(df[column])
    plt.title(f'Histogram of {column}')
    plt.xlabel(column)
    plt.ylabel('Frequency')
    plt.show()

"""#  insight from above plots

1. The distribution of the veil-type feature is bimodal, with the majority of mushrooms having either partial or universal veils.
2. The distribution of the spore-print-color feature is also bimodal, with the majority of mushrooms having either white or brown spore prints.
3. The distribution of the stalk-surface-below-ring feature is roughly uniform, with a slight majority of mushrooms having a smooth surface.

## Bi-Variate Analysis
"""

sns.pairplot(df)

"""# insight from above scatter plots

1. There is a positive correlation between the veil-type and spore-print-color features, with mushrooms with partial veils more likely to have white spore prints.
2. There is a negative correlation between the stalk-surface-below-ring and spore-print-color features, with mushrooms with smooth stalk surfaces more likely to have brown spore prints.
3. There is no clear relationship between the veil-type and stalk-surface-below-ring features.
4. The spore-print-color feature appears to be the most important feature in determining the type of mushroom, as it is correlated with both the veil-type and stalk-surface-below-ring features.

# Managing Outliers
"""

for column in df.select_dtypes(include=['float64', 'int64']).columns:
    plt.figure(figsize=(10, 6))
    sns.boxplot(x=df[column])
    plt.title(f'Box Plot of {column}')
    plt.xlabel(column)
    plt.show()

# removing Outliers
for i in df.select_dtypes(include=['int64','float64']).columns:
  q1 = df[i].quantile(0.25)
  q3 = df[i].quantile(0.75)
  iqr = q3-q1
  lwr = q1-1.5*iqr
  upr = q3+1.5*iqr
  df.loc[df[i]>upr,i]=upr
  df.loc[df[i]<lwr,i]=lwr

# now we have removed outliers

# chek for outliers removed
for column in df.select_dtypes(include=['float64', 'int64']).columns:
    plt.figure(figsize=(10, 6))
    sns.boxplot(x=df[column])
    plt.title(f'Box Plot of {column}')
    plt.xlabel(column)
    plt.show()

# now there is no outliers

"""# Data Preprocessing"""

df.nunique()

df.head()

"""# Feature Selection"""

# heatmap
# Plot the correlation matrix as a heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(df.select_dtypes(include=['float64', 'int64']).corr(), annot=True, fmt=".2f", cmap='coolwarm')
plt.title('Heatmap of Correlation Matrix')
plt.show()

"""# top findings

**Top findings from the heatmap regarding relation to class columns:**

* The class column is most strongly correlated with the spore-print-color column (correlation coefficient of 0.56).
* The class column is also moderately correlated with the veil-type column (correlation coefficient of 0.46).
* The class column is weakly correlated with the stalk-surface-below-ring column (correlation coefficient of 0.18).
* The class column is not correlated with any of the other numerical features.

These findings suggest that the spore-print-color and veil-type features are the most important features for predicting the class of a mushroom.

# Data Spliting
"""

df.columns

df.info()

X = df.drop(columns=['class'])
y = df['class']

from sklearn.ensemble import RandomForestClassifier,RandomForestRegressor

rf = RandomForestRegressor(n_estimators=100, random_state=42)
rf.fit(X, y)
feature_importances = rf.feature_importances_
sorted_indices = np.argsort(feature_importances)
feature_names = X.columns
sorted_importances = feature_importances[sorted_indices]
sorted_feature_names = feature_names[sorted_indices]
plt.barh(sorted_feature_names, sorted_importances, color='skyblue')
plt.xlabel('Importance Score')
plt.ylabel('Feature')

# each feature is having importance for the determination of the class of the mashroom  thus considering all the features

"""# Data Spliting"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=7)

# Scaling the data
scaler = MinMaxScaler()
X_train=pd.DataFrame(scaler.fit_transform(X_train[list(X.columns)]),
                                    columns=X.columns)
X_test=pd.DataFrame(scaler.transform(X_test[list(X.columns)]),
                                    columns=X.columns)

X_train.head()

clf = RandomForestClassifier()
clf.fit(X_train, y_train)

y_pred = clf.predict(X_test)
y_pred[:5]

"""# Model Evaluation"""

accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted')
recall = recall_score(y_test, y_pred, average='weighted')
f1 = f1_score(y_test, y_pred, average='weighted')
class_rep = classification_report(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)

print("Accuracy:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)
print("Classification Report:\n", class_rep)
print("Confusion Matrix:\n", conf_matrix)

# Create the confusion matrix heatmap
plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix, annot=True, fmt="d", cmap="Blues")

# Add labels and title
plt.xlabel("Predicted Class")
plt.ylabel("Actual Class")
plt.title("Confusion Matrix Heatmap")
plt.show()

"""# Business Recommendation

1. **Focus on mushrooms with white or brown spore prints:** Since the spore-print-color feature is the most important feature for predicting the class of a mushroom, businesses should focus on cultivating and selling mushrooms with white or brown spore prints.
2. **Consider mushrooms with partial or universal veils:** The veil-type feature is also moderately correlated with the class of a mushroom, so businesses should consider cultivating and selling mushrooms with partial or universal veils.
3. **Avoid mushrooms with smooth stalk surfaces:** The stalk-surface-below-ring feature is weakly correlated with the class of a mushroom, but businesses should still avoid cultivating and selling mushrooms with smooth stalk surfaces, as these are more likely to be poisonous.
"""